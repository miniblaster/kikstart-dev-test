{{ 'section-collection-tabs.css' | asset_url | stylesheet_tag }}

{%- style -%}
  .section-{{ section.id }}-padding {
    padding-top: {{ section.settings.padding_top | times: 0.75 | round: 0 }}px;
    padding-bottom: {{ section.settings.padding_bottom | times: 0.75 | round: 0 }}px;
  }

  @media screen and (min-width: 750px) {
    .section-{{ section.id }}-padding {
      padding-top: {{ section.settings.padding_top }}px;
      padding-bottom: {{ section.settings.padding_bottom }}px;
    }
  }
{%- endstyle -%}

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>

<div class="page-width" data-base-url="">
  <div class="collection-navbar">
    {% for block in section.blocks %}
      {% assign titleToUrl = block.settings.collection.title | downcase | replace: ' ', '-' %}
      <a class="collection-tab" href="/collections/{{ titleToUrl }}">{{ block.settings.collection.title }}</a>
    {% endfor %}
  </div>

  <div class="collection-navbar-mobile">
    <select class="collection-dropdown">
      {% for block in section.blocks %}
        {% assign titleToUrl = block.settings.collection.title | downcase | replace: ' ', '-' %}
        <option value="/collections/{{ titleToUrl }}" {% if block.settings.collection.title == collection.title %}selected{% endif %}>
          {{ block.settings.collection.title }}
        </option>
      {% endfor %}
    </select>
  </div>
</div>

<script>
  $(function() {
    let filters = ""
    let collectionTabs = document.querySelectorAll('.collection-tab')
    let collectionDropdowns = document.querySelectorAll('.collection-dropdown')

    collectionDropdowns.forEach(collectionDropdown => {
      collectionDropdown.addEventListener('change', (event) => {
        event.preventDefault()

        // Slice the url to get the filter parameters
        const currentUrl = window.location.href
        filters = currentUrl.includes('?') ? currentUrl.substring(currentUrl.indexOf('?')) : ''

        document.querySelector('[data-base-url]').dataset.baseUrl = event.target.value
        ajaxUpdateCollectionGrid(event.target.value + filters)
      })
    })

    collectionTabs.forEach(collectionTab => {
        collectionTab.addEventListener('click', loadCollection)
    })

    function loadCollection(event) {
        event.preventDefault()

        // Slice the url to get the filter parameters
        const currentUrl = window.location.href
        filters = currentUrl.includes('?') ? currentUrl.substring(currentUrl.indexOf('?')) : ''

        document.querySelector('[data-base-url]').dataset.baseUrl = event.currentTarget.href
        ajaxUpdateCollectionGrid(event.currentTarget.href + filters)
    }

    function ajaxUpdateCollectionGrid(ajaxUrl) {
      fetch(ajaxUrl)
        .then(response => {
          if (response.ok) {
            return response.text()
          } else {
            throw new Error('Network response was not ok.')
          }
        })
        .then(responseText => {
          // update page contents
          const filteredPage = document.createElement('div')
          filteredPage.innerHTML = responseText

          const filteredProducts = filteredPage.querySelector('.collection')
          const filteredCollectionTitle = filteredPage.querySelector('.collection-hero__title')
          const filteredCollectionDropdown = filteredPage.querySelector('.collection-dropdown')

          // update page url
          history.pushState(null, '', ajaxUrl)

          const collectionLayout = document.querySelector('.collection')
          const collectionTitle = document.querySelector('.collection-hero__title')
          const collectionDropdown = document.querySelector('.collection-dropdown')
          collectionLayout.innerHTML = filteredProducts.innerHTML
          collectionTitle.innerHTML = filteredCollectionTitle.innerHTML
          collectionDropdown.innerHTML = filteredCollectionDropdown.innerHTML
        })
        .catch(error => {
          console.error(error)
        })
    }
  })
</script>

{% schema %}
{
  "name": "Collection Tabs",
  "tag": "section",
  "class": "section section-collection-tabs",
  "max_blocks": 20,
  "settings": [
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "Padding Top",
      "default": 36
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "Padding Bottom",
      "default": 36
    }
  ],
  "blocks": [
    {
      "type": "featured_collection",
      "name": "Collection",
      "settings": [
        {
          "type": "collection",
          "id": "collection",
          "label": "Select Collection"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Collection Tabs",
      "blocks": [
        {
          "type": "featured_collection"
        }
      ]
    }
  ]
}
{% endschema %}
